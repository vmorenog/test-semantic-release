name: Release automatically with semantic-release

on:
  workflow_dispatch: # choose when to execute a deployment to production

permissions:
  contents: read # for checkout

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false # <--- this is important to avoid leaking GITHUB_TOKEN to npm

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Install dependencies
        run: npm clean-install

      - name: Verify the integrity of provenance attestations and registry signatures for installed dependencies
        run: npm audit signatures

      - name: Generate GitHub App Token
        id: app_auth
        run: |
          APP_ID=${{ secrets.GH_APP_ID }}
          PRIVATE_KEY="${{ secrets.GH_APP_PRIVATE_KEY }}"

          # Convert private key to a format that openssl can read
          echo "$PRIVATE_KEY" > private-key.pem

          # Generate JWT
          HEADER=$(echo -n '{"alg":"RS256","typ":"JWT"}' | base64 | tr -d '=' | tr '/+' '_-')
          PAYLOAD=$(echo -n "{\"iat\":$(date +%s),\"exp\":$(( $(date +%s) + 600 )),\"iss\":$APP_ID}" | base64 | tr -d '=' | tr '/+' '_-')
          SIGNATURE=$(echo -n "$HEADER.$PAYLOAD" | openssl dgst -sha256 -sign private-key.pem | base64 | tr -d '=' | tr '/+' '_-')
          JWT="$HEADER.$PAYLOAD.$SIGNATURE"

          # Get Installation Token
          INSTALLATION_ID=$(curl -s -H "Authorization: Bearer $JWT" -H "Accept: application/vnd.github.v3+json" https://api.github.com/app/installations | jq '.[0].id')
          TOKEN=$(curl -s -X POST -H "Authorization: Bearer $JWT" -H "Accept: application/vnd.github.v3+json" https://api.github.com/app/installations/$INSTALLATION_ID/access_tokens | jq -r .token)

          echo "::set-output name=token::$TOKEN"

      - name: Release
        env:
          GITHUB_TOKEN: ${{ steps.app_auth.outputs.token }}
        run: npx semantic-release
